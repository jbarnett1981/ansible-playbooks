---
# file: main.yml
# The tasks for the Cobbler role

# -------------
# Prerequisites
# -------------

- name: unsupported package manager
  fail: msg='this playbook requries yum or apt only'
  when: ansible_pkg_mgr != 'yum' and ansible_pkg_mgr != 'apt'

# -------------
# facts
# -------------

- set_fact:
    daemon: cobbler
  when: ansible_pkg_mgr == 'apt'

- set_fact:
    daemon: cobblerd
  when: ansible_pkg_mgr == 'yum'

# ---------------
# Package Sources
# ---------------

# yum
- name: configure epel repo (yum)
  template: src=epel.repo.j2
        dest=/etc/yum.repos.d/epel.repo
        owner=root group=root mode=0644

# ------------
# Dependencies
# ------------

# yum
- name: install dependencies (yum)
  yum: name={{ item }} state=present
  with_items:
    - xinetd
    - pykickstart

# -------
# selinux
# -------
- name: set selinux to disabled (yum)
  selinux: state=disabled

# -----
# dhcpd
# -----
# - name: configure dhcpd (yum)
#   template: src=dhcpd.j2 dest=/etc/sysconfig/dhcpd

# - name: enable dhcpd (yum)
#   service: name=dhcpd state=stopped enabled=true

# ---------
# firewalld
# ---------
- name: check if firewalld is installed
  sudo: yes
  command: which firewalld
  register: firewalld
  changed_when: false
  ignore_errors: true

- name: check if firewalld service is running
  sudo: yes
  command: firewall-cmd --state
  register: firewalld_svc
  ignore_errors: true
  when: firewalld|success

- name: enable cobbler tftpd through firewalld
  sudo: yes
  firewalld: service=tftp permanent=true state=enabled
  notify: restart firewalld
  when: firewalld|success and firewalld_svc.stdout=='running'

- name: enable cobbler httpd through firewalld
  sudo: yes
  firewalld: service=http permanent=true state=enabled
  notify: restart firewalld
  when: firewalld|success and firewalld_svc.stdout=='running'

# ---
# ufw
# ---
- name: check if ufw is installed
  sudo: yes
  command: which ufw
  register: ufw
  changed_when: false
  ignore_errors: true

- name: allow tftp through ufw
  sudo: yes
  ufw: rule=allow port=69 proto=tcp
  when: ufw|success

- name: allow http through ufw
  sudo: yes
  ufw: rule=allow port=80 proto=tcp
  when: ufw|success

# -------
# Cobbler
# -------
- name: install cobbler (yum)
  yum: name=cobbler state=present
  when: ansible_pkg_mgr == 'yum'

- name: install cobbler (apt)
  apt: name=cobbler state=present
  when: ansible_pkg_mgr == 'apt'

- name: install cobbler-web (yum)
  yum: name=cobbler-web state=present
  when: ansible_pkg_mgr == 'yum'

- name: install cobbler-web (apt)
  apt: name=cobbler-web state=present
  when: ansible_pkg_mgr == 'apt'

- stat: path=/etc/apache2
  register: apache2_path

- name: start and enable apache2
  service: name=apache2 state=started enabled=true
  when: apache2_path.stat.isdir is defined and apache2_path.stat.isdir

- stat: path=/etc/httpd
  register: httpd_path

- name: start and enable httpd
  service: name=httpd state=started enabled=true
  when: httpd_path.stat.isdir is defined and httpd_path.stat.isdir

- name: configure xinetd rsync
  copy: src=rsync
        dest=/etc/xinetd.d/
        owner=root group=root mode=0644
  notify: restart xinetd

- name: start and enable xinetd
  service: name=xinetd state=started enabled=true

- name: configure cobbler
  template: src=settings.j2 dest=/etc/cobbler/settings
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: start and enable cobbler
  service: name={{daemon}} state=started enabled=true

- name: wait for cobbler
  wait_for: host=127.0.0.1 port=25151 delay=5 timeout=30 state=started

- name: get cobbler loaders
  command: cobbler get-loaders
  args:
    creates: /var/lib/cobbler/loaders/README
  when: cobbler_get_loaders
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: update cobbler signatures
  command: cobbler signature update
  when: cobbler_signature_update
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: create /repo/data and git pull kickstarts/scripts/snippets
  git: repo=https://devit-admin:1xKAWF6mm6@gitlab.tableausoftware.com/devit/cobbler.git dest=/repo/data/ accept_hostkey=yes
  tags:
     - git_clone

- name: update kickstart/scripts/snippets locations with symlinks to git repo above
  command: mv /var/lib/cobbler/{{item}} /var/lib/cobbler/{{item}}.old
  with_items: "{{folders}}"
  tags:
     - folders

- name: symlink kickstart/scripts/snippets to git repo sources
  file: src=/repo/data/{{item}} dest=/var/lib/cobbler/{{item}} owner=root group=root state=link
  with_items: "{{folders}}"
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler
  tags:
     - folders
- name: reset htdigest / cobbler-web password
  shell: DIGESTLINE=$(echo -n "{{cobbler_user}}:{{cobbler_realm}}:" && echo -n "{{cobbler_user}}:{{cobbler_realm}}:{{cobbler_pass}}" | md5sum | awk '{print $1}') && sed -i -e "/^{{cobbler_user}}:{{cobbler_realm}}:/ c$DIGESTLINE" /etc/cobbler/users.digest
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler
    - restart xinetd
  tags:
     - htdigest

- name: configure pxelocal.template
  template: src=pxedefault.template.j2 dest=/etc/cobbler/pxe/pxedefault.template
  notify:
    - sync cobbler
  tags:
     - pxedefault

# - name: configure cobbler dhcp
#   template: src=dhcp.template.j2 dest=/etc/cobbler/dhcp.template
#   notify:
#     - restart cobbler
#     - wait for cobbler
#     - sync cobbler

# - name: adding defualt ubuntu preseed
#   template: src=ubuntu-server.preseed.j2 dest=/etc/cobbler/ubuntu-server.preseed

# ---------------------
# Cobbler Distributions
# ---------------------

# Attempt to un-mount any previous disto mount points, can occur if previous run failed
- name: umount isos
  shell: umount {{ item.path }}
  with_items: "{{distros}}"
  when: distros is defined
  ignore_errors: yes

- name: create iso directory to hold distro images
  file: path=/repo/iso state=directory
  when: distros is defined

# Download each defined distro ISO if it doesn't already exist
- name: download distro iso files
  get_url: url={{ item.url }} dest={{ item.file }}
  with_items: "{{distros}}"
  when: distros is defined

# Add the each distro/profile pair only if the distro doesn't already exist
- name: check distro exists in cobbler
  with_items: "{{distros}}"
  command: cobbler distro report --name={{ item.name }}
  register: distro_result
  ignore_errors: true
  when: distros is defined

- name: add distro/profile pairs to cobbler
  shell: >
    (mkdir -p {{ item.path }}
    && mount -t iso9660 -o loop,ro {{ item.file }} {{ item.path }}
    && cobbler import --path={{ item.path }} --name={{ item.name }} --arch={{ item.arch }} {% if item.kickstart is defined %}--kickstart={{ item.kickstart }}{% endif %}
    && umount {{ item.path }})
  with_items: "{{distros}}"
  when: distros is defined and distro_result|failed
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# - name: check distro for import exists in cobbler
#   with_items: "{{distro_imports}}"
#   command: cobbler distro report --name="{{ item.name }}"
#   register: distro_imports_result
#   ignore_errors: true
#   when: distro_imports is defined

# - name: import distro to cobbler
#   shell: cobbler import --name="{{ item.name }}-{{ item.arch }}" --path="{{ item.url }}" --arch="{{ item.arch }}"
#   with_items: "{{distro_imports}}"
#   when: distro_imports is defined and distro_imports_result|failed
#   notify:
#     - restart cobbler
#     - wait for cobbler
#     - sync cobbler

# ---------------
# Cobbler Repos
# ---------------

- name: add repos to cobbler
  shell: >
    cobbler repo add
    --clobber
    --name={{ item.name }}
    --mirror={{ item.mirror }}
    {% if item.arch is defined %}--arch={{ item.arch }}{% endif %}
    {% if item.mirror_locally is defined %}--mirror-locally={{ item.mirror_locally }}{% endif %}
  with_items: "{{repos}}"
  when: repos is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------
# Cobbler Profiles
# ---------------

- name: add profiles to cobbler
  shell: >
    cobbler profile add
    --clobber
    --name={{ item.name }}
    --distro={{ item.distro }}
    {% if item.kickstart is defined %}--kickstart={{ item.kickstart }}{% endif %}
    {% if item.ksmeta is defined %}--ksmeta={{ item.ksmeta }}{% endif %}
    {% if item.repos is defined %}--repos={{ item.repos }}{% endif %}
    {% if item.kopts is defined %}--kopts={{ item.kopts }}{% endif %}
  with_items: "{{profiles}}"
  when: profiles is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

# ---------------
# Cobbler Systems
# ---------------

- name: add systems to cobbler
  shell: >
    cobbler system add
    --clobber
    --name={{ item.name | quote }}
    --hostname={{ item.hostname | quote }}
    --profile={{ item.profile | quote }}
    --ip-address={{ item.ip | quote }}
    --gateway={{ item.gateway | quote }}
    --mac={{ item.mac | quote }}
    --interface={{ item.interface | quote }}
    --netboot-enabled={{ item.netboot | quote }}
    {% if item.static is defined %}--static={{ item.static | quote }}{% endif %}
    {% if item.dhcptag is defined %}--dhcp-tag={{ item.dhcptag | quote }}{% endif %}
    {% if item.next_server is defined %}--server {{ item.next_server | quote }}{% endif %}
  with_items: "{{systems}}"
  when: systems is defined
  notify:
    - restart cobbler
    - wait for cobbler
    - sync cobbler

- name: create web endpoints for post_install_scripts and iso
  template: src=bits.conf.j2 dest=/etc/httpd/conf.d/bits.conf
  notify:
    - restart httpd
  tags:
     - httpdlinks